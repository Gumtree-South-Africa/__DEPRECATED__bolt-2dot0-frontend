#!/usr/bin/env node

'use strict';


/**
 * Module dependencies.
 */
var http = require('http'),
    https = require('https'),
    fs = require('fs');

var cwd = process.cwd();
var app = require(cwd + '/app');
var debug = require('debug')('bolt-2dot0-frontend:server');


/**
 * Get port from environment and store in Express.
 */
var httpPort = normalizePort(process.env.PORT || '8000');
app.locals.httpPort = httpPort;

var httpsPort = normalizePort(process.env.SSL_PORT || '8443');
app.locals.httpsPort = httpsPort;


/**
 * Create HTTP server.
 */
var httpServer = http.createServer(app);
httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Create HTTPS server.
 */
var options = {
  key  : fs.readFileSync(cwd + '/bin/ssl/nodekey.pem'),
  ca   : fs.readFileSync(cwd + '/bin/ssl/nodecsr.pem'),
  cert : fs.readFileSync(cwd + '/bin/ssl/nodecert.pem')
}
var httpsServer = https.createServer(options, app);
httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string'
      ? 'Pipe ' + httpPort
      : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

$standardTileWidth: 110px;
$standardTileHeight: 130px;
$gutterVertical: 10px;
$gutterHorizontal: 10px;

@function tileWidth($tileUnits) {
    // a "tileUnit" is a dimension of the tile like a 1x1 or 2x2, units are 1 or 2
    @return $tileUnits * $standardTileWidth + (($tileUnits - 1) * $gutterHorizontal)
}
@function tileHeight($tileUnits) {
    // a "tileUnit" is a dimension of the tile, example a 1x1 or 2x2, unit is either 1 or 2
    @return $tileUnits * $standardTileHeight + (($tileUnits - 1) * $gutterVertical)
}

.gutter-sizer-horizontal {
    width: $gutterHorizontal;
}

.column-sizer {
    width: tileWidth(1);
}

.tile-grid-width-container {
    width: 90%;
    margin: auto;
}


.tile-container {

	// adding a width to the isotope container without javascript
	// this class will be replaced once javascript lands on the page
	&.use-isotope-handler {
		@for $i from 2 through 12 {
			@media(min-width: tileWidth($i) ) {
				width: tileWidth($i - 1);
			}
		}
	}

    margin: auto;

    .tile-item {
        border-radius: 10px;

        // standard size if we dont have javascript turned on on home page
        width: tileWidth(1);
        height: tileHeight(1);
        float: left;

        // we need vertical space between items, according to isotope we use margin-bottom:
        margin-bottom: $gutterVertical;
    }

    // when the parent has class 'using-isotope', we know the client side js has taken over, so we get multiple sizes
    &.using-isotope > .tile-item {
        float: none;
        // 'A'
        &.one-by-one {
            width: tileWidth(1);
            height: tileHeight(1);
        }
        // 'B'
        &.one-by-two {
            width: tileWidth(1);
            height: tileHeight(2);
        }
        // 'C'
        &.two-by-two {
            width: tileWidth(2);
            height: tileHeight(2);
        }
        // 'D'
        &.two-by-three {
            width: tileWidth(2);
            height: tileHeight(3);
        }
    }
}

.card-clear {
    clear: both;
}

